{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository & Configuration",
        "description": "Initialize the Next.js project repository with pnpm 10.14.0, Typescript, ESLint and Tailwind CSS. Establish project structure and environment configuration.",
        "details": "Initialize a new Next.js project using the latest Next.js (v13+) with pnpm 10.14.0. Setup TypeScript with a tsconfig.json, configure ESLint with recommended rules, and integrate Tailwind CSS. Create a basic directory structure (pages, components, lib, etc.). Ensure to commit initial files to version control. Recommended versions: Next.js latest stable, Tailwind CSS 3.x, ESLint 8.x.",
        "testStrategy": "Validate that the project compiles and runs locally. Check that ESLint runs without errors and Tailwind styles load on a sample page.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Configure Database with Prisma and PostgreSQL",
        "description": "Set up Prisma ORM with PostgreSQL, create models for User and File as per the PRD requirements.",
        "details": "Install Prisma CLI and client (latest version, e.g. prisma@4.x). Create a schema.prisma file. Define two models: User (using the base model from better-auth with a unique 'cccd' field, email, etc.) and File to map user to S3 object ID. Configure the connection string in a .env file (use localhost:5432 for development). Run migrations to update the database.",
        "testStrategy": "Test connection to the database with Prisma studio, run a sample query to ensure data insertion and retrieval works without errors. Validate unique constraints on 'cccd'.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Integrate Better-Auth for Authentication",
        "description": "Configure better-auth in Next.js to handle user registration and authentication, ensuring CCCD is integrated as unique identifier.",
        "details": "Follow the Better-Auth integration guide for Next.js. Install better-auth (latest version from the provided link) and follow installation steps. Modify the registration flow to include a 'cccd' input field ensuring its uniqueness. Test basic login and registration functionality. Ensure to secure endpoints against SQL injection by sanitizing inputs.",
        "testStrategy": "Test user registration and login flows through unit tests and manual UI interactions. Validate that the CCCD field behaves as expected and that password reset through email works using a mocked email service.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Student (SV) Registration and Authentication UI",
        "description": "Develop the frontend pages and API routes for student registration and authentication using Better-Auth integration.",
        "details": "Create Next.js pages for student sign-up and login. Use Tailwind CSS for styling a minimal but clean UI. Include input validation (client and server side) for fields: cccd, email, password. Use Next.js API routes to handle authentication logic interfacing with better-auth and Prisma. Include pseudo-code for API route: \n\n// Pseudo-code:\n// POST /api/auth/register:\n//    const { cccd, email, password } = req.body;\n//    Validate inputs;\n//    Call better-auth registration function;\n//    Return success response.",
        "testStrategy": "Manually test the registration process in the browser. Write unit tests for API routes to validate input sanitization, and simulate database insertion.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Develop S3-based File Upload Service Module",
        "description": "Implement a decoupled file upload service that uses AWS S3 SDK as the backend for file storage with a limit of 15MB per file.",
        "details": "Create an abstraction for file storage. For MVP, implement using AWS S3 SDK v3. Handle file size validation (15MB max) on the frontend and backend. Wrap S3 operations in a service layer (e.g. an 'uploadService.ts' file) that can be swapped out in future. Code snippet (pseudo-code):\n\n// if(file.size > 15MB) throw error;\n// s3Client.send(new PutObjectCommand({ Bucket, Key, Body: file }));\n\nEnsure proper error handling and logging. Use environment variables for S3 configuration from .env.",
        "testStrategy": "Write integration tests to upload a file and verify presence in S3 (or a mock S3 service in development). Validate rejection for files >15MB.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create Frontend Page for Downloading Sample Form",
        "description": "Develop a minimal frontend page that provides a download button for a sample form to be filled by students.",
        "details": "Create a static Next.js page (e.g. /download) using Tailwind CSS for styling. Implement a simple button that triggers file download for a sample form (e.g. a PDF or DOCX stored locally in the public folder). Use an HTML anchor tag with the download attribute. \n\nExample: <a href='/sample-form.pdf' download>Download Sample Form</a>.",
        "testStrategy": "Verify that clicking the download button retrieves the sample file directly in different browsers. Validate file integrity after download.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Student File Upload UI",
        "description": "Develop a frontend page where students can upload their completed form and integrate it with the backend upload service.",
        "details": "Create a Next.js page (e.g., /upload) with an upload form using Tailwind CSS. Use an <input type='file'> element, limit file selection to <15MB files. On submit, make an API call to the file upload endpoint that uses the upload service from Task 5. Include client-side validation for file type and size.\n<info added on 2025-08-06T04:34:19.376Z>\nImplemented a comprehensive student file upload UI with the following additional features:\n\n• New responsive upload page (/upload) with Tailwind CSS that includes an authentication check and redirects unauthenticated users to login.\n• Enhanced file input supporting both traditional selection and drag-and-drop, along with client-side validations for file size (max 15MB), allowed formats (PDF, DOC, DOCX, JPG, PNG), empty file detection, and MIME type verification.\n• Integrated a three-step backend upload process: obtaining a presigned URL via /api/upload/presigned-url, uploading directly to S3 with XMLHttpRequest (including visual progress tracking via a progress bar and percentage display), and completing the upload by calling /api/upload/complete to save metadata.\n• Improved user experience through file previews with size information, an option to remove files before upload, loading states during authentication, and error handling with user-friendly messages and retry capability.\n• Navigation enhancements include an \"Upload Your Form\" button on the home page, updated download page linking to the upload feature, and authenticated user-aware navigation elements that link to the student dashboard, accompanied by a help section with a link to download a sample form.\n</info added on 2025-08-06T04:34:19.376Z>",
        "testStrategy": "Perform manual testing of file upload functionality; use unit tests for API endpoints handling file uploads, and ensure files beyond the limit are rejected.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Develop Student Application Status Viewing Page",
        "description": "Create a page that allows students to view the status of their submitted application.",
        "details": "Implement a Next.js page (e.g., /status) that retrieves and displays the current approval status from the backend via an API endpoint. Use Prisma to query the File record associated with the user. Display statuses such as 'Pending', 'Approved', or 'Rejected'. Provide minimal styling with Tailwind CSS.",
        "testStrategy": "Unit test the API route for status retrieval, and perform manual UI tests to verify the correct status is displayed for different scenarios.",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Build GV Table View to List Student Submissions",
        "description": "Develop a GV (Teacher) dashboard page that displays a paginated and optimized table of student submissions with file download functionality.",
        "details": "Create a Next.js page (e.g., /gv/dashboard) that retrieves a list of student records using Prisma. Implement server-side pagination to optimize data loading. Display the list in a table with details (name, cccd, submission date, status) and include a download button for each submission which triggers a file download using the file mapping from Task 2. Use Tailwind CSS for basic styling.",
        "testStrategy": "Perform smoke tests for pagination and table data loading. Validate file download links, and ensure table performance with a mocked large dataset.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Develop GV Detail View for Individual Student Submission",
        "description": "Create a detail view page for GV to see comprehensive information about an individual student's application including file details.",
        "details": "Implement a Next.js dynamic route page (e.g., /gv/student/[id]) that fetches detailed data for a given student using Prisma. Display user details, submission metadata, and provide a download link for the associated file. Ensure input sanitization to protect against injection attacks.",
        "testStrategy": "Manually test the detail view page by passing valid and invalid identifiers. Write unit tests to confirm safe handling and correct data retrieval.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement GV Approval Workflow",
        "description": "Develop the capability for GV to update the approval status of student submissions.",
        "details": "Create an API endpoint (e.g., PUT /api/approval) that allows GV users to update the status of a student's submission. Provide necessary input validations, and update the corresponding record in the File table. Reflect the updated status on the GV detailed view and student status pages. Pseudo-code:\n\n// Validate request and GV user permissions\n// query Prisma to update status field\n// return updated record",
        "testStrategy": "Use API tests to ensure only authorized GV users can update statuses. Verify status changes persist in the database and propagate to the UI.",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Develop Load Testing and Optional Sentry Integration",
        "description": "Create load test scripts using Grafana k6 and integrate optional Sentry for error monitoring to ensure system resilience under load.",
        "details": "Write load testing scripts in k6, simulating multiple student and GV interactions (registration, file upload, data fetching). Document thresholds (e.g. concurrent requests). Optionally, integrate Sentry (latest @sentry/node V7+) into both frontend and backend for error monitoring. Provide clear configuration instructions using DSN from Sentry. \n\nExample of k6 script snippet:\n\nimport http from 'k6/http';\nexport default function () {\n  http.get('http://localhost:3000/api/status');\n}\n",
        "testStrategy": "Run k6 scripts to simulate load and observe performance metrics using Grafana dashboards. Validate that Sentry catches and logs errors in testing scenarios.",
        "priority": "low",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Refactor Frontend Authentication to Fully Align with Better-Auth Best Practices",
        "description": "Resolve all frontend authentication integration issues by removing legacy localStorage logic, implementing robust session management, and enforcing role-based access using Better-Auth's recommended patterns.",
        "details": "1. Remove all localStorage-based authentication logic from LoginForm.tsx and any other components, replacing it with Better-Auth's session management via the useSession hook from the better-auth client library (e.g., import { useSession } from 'better-auth/react').\n2. Refactor the login flow to use Better-Auth's session state: after successful login, use the session object to determine user authentication and role, and redirect accordingly (e.g., to /dashboard or /gv/dashboard). Ensure navigation is handled only after session is established and isPending is false.\n3. Implement global session state management by wrapping the app in Better-Auth's provider (if not already done), and ensure all protected components/pages check session state before rendering sensitive UI. Use Next.js middleware (middleware.ts) to enforce route protection and redirect unauthenticated users to /login, following best practices for authentication middleware in Next.js 13+.[2]\n4. Implement role-based redirects and UI gating: after login, check the user's role from the session data and redirect to the appropriate dashboard. In protected pages, render content conditionally based on session and role, showing loading states while isPending is true.\n5. Audit all components that previously relied on localStorage or ad-hoc session checks, updating them to use the Better-Auth session context and hooks exclusively. Remove any redundant or insecure code.\n6. Ensure all API requests from the frontend include credentials (cookies) and handle 401 responses by redirecting to /login as needed.[2]\n7. Follow security best practices: use HttpOnly cookies for session tokens, avoid exposing sensitive data in the client, and ensure all redirects and session checks are server-side where possible.[2]\n8. Document the new authentication flow and update onboarding/readme instructions for frontend developers.",
        "testStrategy": "1. Manually test the login flow: verify that after successful login, users are redirected to the correct dashboard based on their role, and are not sent back to the login page unless their session expires.\n2. Attempt to access protected routes as an unauthenticated user and confirm redirection to /login. As an authenticated user, confirm access to authorized pages and denial of access to unauthorized ones (e.g., student vs. GV dashboards).\n3. Use unit and integration tests to verify that session state is correctly propagated across components, and that UI is gated behind proper session checks.\n4. Simulate session expiration and ensure the UI responds by redirecting to /login and clearing sensitive state.\n5. Confirm that no authentication data is stored in localStorage or other insecure client-side storage.\n6. Review API requests in browser dev tools to ensure credentials are sent and 401 responses are handled gracefully.\n7. Perform code review to ensure all legacy authentication logic is removed and only Better-Auth session management is used.",
        "status": "pending",
        "dependencies": [
          3
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Remove Legacy localStorage Authentication Logic",
            "description": "Eliminate all authentication logic that relies on localStorage from LoginForm.tsx and any other components, replacing it with Better-Auth's session management using the useSession hook.",
            "dependencies": [],
            "details": "Identify and remove all instances where authentication state is stored or checked via localStorage. Refactor these components to use the useSession hook from better-auth/react for session management, ensuring that authentication state is now derived exclusively from Better-Auth.\n<info added on 2025-08-06T05:11:05.520Z>\nImport signIn and useSession from auth-client in LoginForm.tsx. Remove the localStorage.setItem call and any reliance on localStorage for authentication state. Replace calls to the custom /api/login endpoint with the signIn function to trigger Better-Auth's login flow. Update the login component so that, on a successful login, session management is fully handled via useSession, ensuring that the session is retrieved and user roles are correctly maintained without referencing legacy localStorage logic.\n</info added on 2025-08-06T05:11:05.520Z>\n<info added on 2025-08-06T05:12:45.149Z>\nCompleted the removal of legacy localStorage usage in LoginForm.tsx. The updates include:\n• Removing localStorage.setItem(\"user\", JSON.stringify(result.user))\n• Replacing the custom /api/login fetch with the better-auth signIn.email() method\n• Adding the useSession hook and relocating redirect logic to a useEffect hook\n• Updating imports to include signIn and useSession from auth-client\n• Verifying that no other parts of the codebase rely on localStorage\n\nThe LoginForm now fully utilizes Better-Auth for authentication and session management, with role-based redirects handled after the session loads via useEffect.\n</info added on 2025-08-06T05:12:45.149Z>",
            "status": "done",
            "testStrategy": "Verify that no authentication data is stored in localStorage and that session state is correctly managed via Better-Auth hooks. Attempt login and logout flows to confirm correct session handling."
          },
          {
            "id": 2,
            "title": "Refactor Login Flow and Implement Role-Based Redirects",
            "description": "Update the login flow to utilize Better-Auth's session state, ensuring users are redirected based on their authenticated role after login, and navigation only occurs after the session is established.",
            "dependencies": [
              "13.1"
            ],
            "details": "After successful login, use the session object to determine user authentication and role. Redirect users to the appropriate dashboard (e.g., /dashboard or /gv/dashboard) only after isPending is false. Ensure navigation logic is decoupled from legacy state and fully relies on Better-Auth session data.\n<info added on 2025-08-06T05:13:08.874Z>\nEnsure rigorous testing of the updated login flow by verifying that after a successful login, users are redirected based on their roles using the Better-Auth session state, with navigation occurring only after isPending is false. Test that session state propagates correctly throughout the application. Additionally, review the current dashboard routes to determine if a separate /dashboard/teacher route is necessary, given that only /dashboard/student exists.\n</info added on 2025-08-06T05:13:08.874Z>\n<info added on 2025-08-06T05:17:08.207Z>\nUpdated implementation now reflects the following changes:\n- LoginForm.tsx exclusively uses Better-Auth’s signIn.email() method.\n- Role-based redirects are implemented within a useEffect that waits for !isPending and valid session data.\n- TEACHER users are redirected to the /gv/dashboard placeholder page, while all other users are directed to /dashboard/student.\n- The code has been updated to use the UserRole type for TypeScript, eliminating any usage of 'any'.\n- Navigation now only occurs once the session is fully established, ensuring accurate and secure routing.\n- Error handling has been refined with proper typed error management.\n- The build completes successfully without TypeScript or lint errors.\n</info added on 2025-08-06T05:17:08.207Z>",
            "status": "done",
            "testStrategy": "Manually test login with different user roles and confirm redirection to the correct dashboard. Ensure navigation does not occur until session is fully established."
          },
          {
            "id": 3,
            "title": "Implement Global Session State and Route Protection",
            "description": "Wrap the application in Better-Auth's provider and enforce route protection using Next.js middleware, ensuring only authenticated users can access protected routes.",
            "dependencies": [
              "13.2"
            ],
            "details": "Integrate the Better-Auth provider at the app root to provide session context globally. Implement Next.js middleware (middleware.ts) to check session state and redirect unauthenticated users to /login, following Better-Auth and Next.js 13+ best practices.",
            "status": "pending",
            "testStrategy": "Attempt to access protected routes as both authenticated and unauthenticated users, verifying correct redirection and access control."
          },
          {
            "id": 4,
            "title": "Audit and Update All Components for Better-Auth Session Usage",
            "description": "Review all frontend components that previously used localStorage or ad-hoc session checks, updating them to use Better-Auth session context and hooks exclusively.",
            "dependencies": [
              "13.3"
            ],
            "details": "Systematically audit the codebase for any remaining legacy authentication logic. Refactor these components to use the Better-Auth session context, removing redundant or insecure code and ensuring consistent session handling throughout the app.",
            "status": "pending",
            "testStrategy": "Run a code search for localStorage and legacy session checks. Confirm all authentication logic now uses Better-Auth hooks and context."
          },
          {
            "id": 5,
            "title": "Enforce Secure API Requests and Document Authentication Flow",
            "description": "Ensure all frontend API requests include credentials, handle 401 responses securely, and update documentation to reflect the new authentication flow and onboarding steps.",
            "dependencies": [
              "13.4"
            ],
            "details": "Update API request logic to always send credentials (cookies), handle 401 Unauthorized responses by redirecting to /login, and follow security best practices (e.g., HttpOnly cookies, no sensitive data exposure). Revise onboarding and README documentation to describe the new authentication flow and developer setup.",
            "status": "pending",
            "testStrategy": "Test API requests for correct credential handling and 401 response behavior. Review documentation for completeness and clarity."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-05T17:49:12.601Z",
      "updated": "2025-08-06T05:17:15.274Z",
      "description": "Tasks for master context"
    }
  }
}